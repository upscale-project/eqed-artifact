# ========== Copyright Header Begin ==========================================
# 
# OpenSPARC T2 Processor File: run.scr
# Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
# 4150 Network Circle, Santa Clara, California 95054, U.S.A.
#
# * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For the avoidance of doubt, and except that if any non-GPL license 
# choice is available it will apply instead, Sun elects to use only 
# the General Public License version 2 (GPLv2) at this time for any 
# software where a choice of GPL license versions is made 
# available with the language indicating that GPLv2 or any later version 
# may be used, or where a choice of which version of the GPL is applied is 
# otherwise unspecified. 
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
# CA 95054 USA or visit www.sun.com if you need additional information or 
# have any questions. 
# 
# ========== Copyright Header End ============================================
sh date
sh hostname
sh uptime

remove_design -all

if {[file exists template]} {
   sh rm -rf template
}
sh mkdir template
if {![file exists gate]} {
   sh mkdir gate
}
if {![file exists log]} {
   sh mkdir log
}

###########################################################################
# 1. Setup from environment variables
###########################################################################

set dv_root [sh echo \$DV_ROOT]
set syn_home [sh echo \$SYN_LIB]
 
source $dv_root/design/sys/synopsys/script/random.scr
source $dv_root/design/sys/synopsys/script/fault_injection_config.scr

source -echo -verbose script/user_cfg_synth.scr

set search_path [concat $search_path script/]

set search_path [concat $syn_home \
   $search_path ]

foreach include_path $include_paths {
   set search_path [concat $search_path $dv_root/$include_path]
}

sh date

set link_library [concat $link_library \
                         $mem_libs \
                         $black_box_designs]

#set target_library $syn_home/lsi_10k.db 

set target_library [concat $target_library \
                           $mem_libs]
set hdlin_enable_vpp true
set hdlin_auto_save_templates false
define_design_lib WORK -path .template
set verilogout_single_bit false
set hdlout_internal_busses true
set bus_naming_style {%s[%d]}
set bus_inference_style $bus_naming_style

echo $search_path


###########################################################################
# 2. Read Designs
###########################################################################

set all_rtl_files  { }
foreach rtl_file $rtl_files {
    set full_file_path $dv_root/$rtl_file
    set all_rtl_files [concat $all_rtl_files $full_file_path ]
}

    analyze -format verilog -define RUNDC $all_rtl_files
    elaborate $top_module

#####

if {[info exists mix_files] && ($mix_files != {}) } {
   foreach mix_file $mix_files {
      set index_beg [expr {[string last "/" $mix_file] + 1}]
      set mix_file_name [string range $mix_file $index_beg end]
      read_file -format verilog -define RUNDC gate/${mix_file_name}.exp
   }
}
set design_list [list]
foreach_in_collection design_object [get_designs] {
   set design_name [get_object_name $design_object]
   lappend design_list $design_name
}
sh date
current_design $top_module

echo $top_module

if {[get_designs -hier $dont_touch_modules] != {}} {
   set_dont_touch $dont_touch_modules
}

set dc_shell_status [ link ]
if {$dc_shell_status == 0} {
   echo "****************************************************"
   echo "* ERROR!!!! Failed to Link...exiting prematurely.  *"
   echo "****************************************************"
   quit
}

###########################################################################
# 3. Set up design constraints
###########################################################################

current_design $top_module
echo $top_module
set clk_name_list [list]
set ideal_inputs [list]
foreach clk_spec $clk_list {
   set listcnt 0
   set clk_port_pin {}
   set clk_name {}
   set clk_freq 0.0
   set setup_skew $default_setup_skew
   set hold_skew  $default_hold_skew
   set clock_transition  $default_clk_transition
   set clk_is_port 1
   foreach element $clk_spec {
      if {$listcnt == 0} {
         set clk_port_pin $element
         set clk_name $element
      }
      if {$listcnt == 1} {
         set clk_freq $element
      }
      if {$listcnt == 2} {
         set setup_skew $element
      }
      if {$listcnt == 3} {
         set hold_skew $element
      }
      if {$listcnt == 4} {
         set clock_transition $element
      }
      if {$listcnt == 5} {
         set clk_name $element
         set clk_is_port 0
      }
      set listcnt [expr $listcnt + 1]
   }
   if {$clk_is_port == 1} {
      set clk_exists [sizeof_collection [find port $clk_port_pin]]
   } else {
      set clk_exists [sizeof_collection [find pin $clk_port_pin]]
   }
   if {$clk_exists != 0} {
      set clk_period [expr 1000.0 / $clk_freq / 1.0]
      set high_time [expr $clk_period / 2.0]
      create_clock $clk_port_pin -period $clk_period -waveform [list 0 $high_time] -name $clk_name
      set_clock_uncertainty -setup $setup_skew [find clock $clk_name]
      set_clock_uncertainty -hold $hold_skew [find clock $clk_name]
      set_clock_transition $clock_transition [find clock $clk_name]
      set_dont_touch_network $clk_name
      if {$clk_is_port == 1} {
         set_drive 0.0 $clk_name
         lappend ideal_inputs $clk_name
      }
      set clk_name_list [concat  $clk_name_list $clk_name]
   }
}
if {$clk_name_list == {} } {
   echo "\[WARNING\] No clock is defined,create a virtual one -- $default_clk..."
   set clk_name $default_clk
   set clk_freq $default_clk_freq
   set clk_period [expr 1000.0 / $clk_freq / 1.0]
   set high_time [expr $clk_period / 2.0]
   set setup_skew $default_setup_skew
   set hold_skew  $default_hold_skew
   set clock_transition  $default_clk_transition
   create_clock -name $clk_name -period $clk_period -waveform [list 0 $high_time]
   set_clock_uncertainty -setup $setup_skew $clk_name
   set_clock_uncertainty -hold $hold_skew $clk_name
}
set non_ideal_inputs [list]
foreach_in_collection input_object [all_inputs] {
   set input_name [get_object_name $input_object]
   set input_is_ideal [lsearch -exact $ideal_net_list $input_name]
   if {$input_is_ideal == -1} {
      lappend non_ideal_inputs $input_name
   } else {
      lappend ideal_inputs $input_name
   }
}

echo $ideal_inputs
echo $non_ideal_inputs

set_input_delay $default_input_delay -clock $clk_name $non_ideal_inputs
set_output_delay $default_output_delay -clock $clk_name [all_outputs]

if {$clk_name_list != {} } {
   group_path -name "reg2reg" -critical_range $critical_range -from [ all_registers -clock_pins ] -to [ all_registers -data_pins ]
   group_path -name "in2reg"  -from $non_ideal_inputs -to [ all_registers -data_pins ]
   group_path -name "reg2out" -from [ all_registers -clock_pins ] -to [all_outputs]
}
   group_path -name "in2out"  -from $non_ideal_inputs -to [all_outputs]
if {[info exists false_path_list] && ($false_path_list != {}) } {
        set_false_path -through $false_path_list
}

if {[info exists enforce_input_fanout_one] && ($enforce_input_fanout_one  == 1)} {
   set_max_fanout 1 $non_ideal_inputs
}

# Load custom constraint file for the unit
# This will overwrite the default constraints


###########################################################################
# 4. More constraints and setup before compile
###########################################################################
# This is to prevent assign statements from generated in the netlist
# Certain rtl coding conventions need to be followed. For IO blocks only 
# write_name_nets_same_as_ports
if {[info exists project_io_cfg] && ($project_io_cfg == 1) } {
   foreach_in_collection design [ get_designs "*" ] {
      current_design $design
      set_fix_multiple_port_nets -outputs -feedthroughs 
   }
   current_design $top_module
}

# Check timing constraints


###########################################################################
# 5. Select important FFs
###########################################################################

# Disable cells that we don't want to use in the library
if {$dont_use_cells != 0} {
   if {[info exists my_dont_use_cell_list] && ($my_dont_use_cell_list != {}) } {
      set dont_use_cell_list [concat $dont_use_cell_list $my_dont_use_cell_list]
   }
   foreach dont_use_cell $dont_use_cell_list {
      set_dont_use [find lib_cell $dont_use_cell]
   }
}

sh date
sh uptime

# Don't remove sequential cells with constant outputs
set compile_seqmap_propagate_constants false

# Switch off the dont_touch attribute globally for set_size_only cells
set dont_touch_nets_with_size_only_cells false

## Source user compile options

set ff_names [get_object [all_registers] ]
set n_ff [llength $ff_names]
		
###########################################################################
#Create the diaglist for fault injection
###########################################################################

set LOGFILE [open fault_list.diaglist w]

puts $LOGFILE "#ifndef SYSNAME"
puts $LOGFILE "#define SYSNAME fc1_fault_injection"
puts $LOGFILE "#define sys(x) fc1_fault_injection_ ## x"
puts $LOGFILE "#define FC"
puts $LOGFILE "#endif\n\n\n"


set reg_groups [list]
set tmpPartition [list]

for { set i 0 } { $i < $n_ff } { incr i } {
	
	lappend tmpPartition $i

	if { [llength $tmpPartition] == $regs_per_group } {
		lappend reg_groups $tmpPartition
		set tmpPartition [list]		
	}
}

if { [llength $tmpPartition] > 1 } {
	lappend reg_groups $tmpPartition
	set tmpPartition [list]		
}

set reg_group_id 0

foreach reg_group $reg_groups {

	puts $LOGFILE "<sys(fault_injection_test_$reg_group_id) sys=fc1_fault_injection -vcs_build_args=+define+FBDIMM_NUM_8+ >"
	puts $LOGFILE "<runargs -sys=fc1_fault_injection -tg_seed=1>"
	puts $LOGFILE "<runargs -sas -vcs_run_args=+show_delta >\n\n\n"

	set start_reg [lindex $reg_group 0]
	set end_reg [lindex $reg_group end]
	
	puts $LOGFILE "<r${start_reg}_r${end_reg} name=r${start_reg}_r${end_reg}>"
	puts $LOGFILE "<runargs $run_args -vcs_run_args=+fault_injection_time_start=$fault_injection_time_start -vcs_run_args=+fault_window_cycles=$fault_window_cycles -vcs_run_args=+error_wait_cycles=$error_wait_cycles -vcs_run_args=+total_injected_faults=$faults_per_ff -vcs_run_args=+start_faulty_reg=$start_reg -vcs_run_args=+end_faulty_reg=$end_reg>"
	
	puts $LOGFILE "\t$assembly_prog"

	puts $LOGFILE "</runargs>"
	puts $LOGFILE "</r${start_reg}_r${end_reg}>\n\n"
		
	puts $LOGFILE "</runargs>"
	puts $LOGFILE "</runargs>\n"
	puts $LOGFILE "</sys(fault_injection_test_$reg_group_id)>\n\n\n"

	incr reg_group_id
}

puts $LOGFILE "\n\n\n#ifdef FC"
puts $LOGFILE "#undef FC"
puts $LOGFILE "#undef sys"
puts $LOGFILE "#undef SYSNAME"
puts $LOGFILE "#endif\n\n"

###########################################################################
#Create fault access points
###########################################################################

set LOGFILE2 [open fault_list.h w]

puts $LOGFILE2 "case(start_faulty_reg)"
set reg_id 0
foreach reg $ff_names {
	
	set faulty_reg_tmp [string map {/ .} $reg_fault_path/$reg]
	puts $faulty_reg_tmp
	set faulty_reg_tmp_lst [split $faulty_reg_tmp /./]
	puts $faulty_reg_tmp_lst
	set faulty_reg_tmp_tmp1 [lindex $faulty_reg_tmp_lst end]
	puts $faulty_reg_tmp_tmp1
	set faulty_reg_tmp_tmp2 [string map {_reg ""} $faulty_reg_tmp_tmp1]
	puts $faulty_reg_tmp_tmp2
	set faulty_reg_tmp_tmp3 [lreplace $faulty_reg_tmp_lst end end $faulty_reg_tmp_tmp2]
		puts $faulty_reg_tmp_tmp3
	set faulty_reg [join $faulty_reg_tmp_tmp3 "."]
		puts $faulty_reg
	puts $LOGFILE2 "\t$reg_id : \$my_invert($faulty_reg);"
	incr reg_id
}
puts $LOGFILE2 "endcase"

sh date

echo "run_create_ff_fault_list.scr completed successfully"

quit
