39a40,42
> //E-QED clk and rst
>   clk,
>   eqed_rst,
3919a3923,3925
> //E-QED Inputs
> input clk;
> input eqed_rst;
4120a4127,4501
> // E-QED signals and signature analyzers
> 
> 
> reg [11:0] M_count;
> wire m_rst;
> wire m_rst2;
> 
> always @(posedge clk) begin
>    if (eqed_rst) begin
>      M_count <= 11'b0 ;
>    end else begin
>      M_count <= M_count + 1;
>    end
> end
> 
> assign m_rst = (M_count == 11'h3FF);
> assign m_rst2 = (M_count == 11'h7FF);
> 
> 
> // SPC-CCX interface
> wire [147:0] eqed_spc0_ccx;
> wire [154:0] eqed_ccx_spc0;
> wire [147:0] eqed_spc1_ccx;
> wire [154:0] eqed_ccx_spc1;
> wire [147:0] eqed_spc2_ccx;
> wire [154:0] eqed_ccx_spc2;
> wire [147:0] eqed_spc3_ccx;
> wire [154:0] eqed_ccx_spc3;
> wire [147:0] eqed_spc4_ccx;
> wire [154:0] eqed_ccx_spc4;
> wire [147:0] eqed_spc5_ccx;
> wire [154:0] eqed_ccx_spc5;
> wire [147:0] eqed_spc6_ccx;
> wire [154:0] eqed_ccx_spc6;
> wire [147:0] eqed_spc7_ccx;
> wire [154:0] eqed_ccx_spc7;
> 
> // Collect the signals for the interface signature block
> assign eqed_spc0_ccx = {spc0_pcx_req_pq, spc0_pcx_atm_pq, spc0_pcx_data_pa};
> assign eqed_ccx_spc0 = {cpx_spc0_data_cx2, pcx_spc0_grant_px};
> assign eqed_spc1_ccx = {spc1_pcx_req_pq, spc1_pcx_atm_pq, spc1_pcx_data_pa};
> assign eqed_ccx_spc1 = {cpx_spc1_data_cx2, pcx_spc1_grant_px};
> assign eqed_spc2_ccx = {spc2_pcx_req_pq, spc2_pcx_atm_pq, spc2_pcx_data_pa};
> assign eqed_ccx_spc2 = {cpx_spc2_data_cx2, pcx_spc2_grant_px};
> assign eqed_spc3_ccx = {spc3_pcx_req_pq, spc3_pcx_atm_pq, spc3_pcx_data_pa};
> assign eqed_ccx_spc3 = {cpx_spc3_data_cx2, pcx_spc3_grant_px};
> assign eqed_spc4_ccx = {spc4_pcx_req_pq, spc4_pcx_atm_pq, spc4_pcx_data_pa};
> assign eqed_ccx_spc4 = {cpx_spc4_data_cx2, pcx_spc4_grant_px};
> assign eqed_spc5_ccx = {spc5_pcx_req_pq, spc5_pcx_atm_pq, spc5_pcx_data_pa};
> assign eqed_ccx_spc5 = {cpx_spc5_data_cx2, pcx_spc5_grant_px};
> assign eqed_spc6_ccx = {spc6_pcx_req_pq, spc6_pcx_atm_pq, spc6_pcx_data_pa};
> assign eqed_ccx_spc6 = {cpx_spc6_data_cx2, pcx_spc6_grant_px};
> assign eqed_spc7_ccx = {spc7_pcx_req_pq, spc7_pcx_atm_pq, spc7_pcx_data_pa};
> assign eqed_ccx_spc7 = {cpx_spc7_data_cx2, pcx_spc7_grant_px};
> 
> parameter SPC_CCX_B = 148;
> parameter CCX_SPC_B = 155;
> 
> parameter SPC_CCX_SB_SIZE = 1184;
> parameter CCX_SPC_SB_SIZE = 1240;
> 
> // Declare the registers for the Signature Analyzer MISRs
> reg [SPC_CCX_SB_SIZE:0] spc0_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc0_sa;
> reg [SPC_CCX_SB_SIZE:0] spc1_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc1_sa;
> reg [SPC_CCX_SB_SIZE:0] spc2_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc2_sa;
> reg [SPC_CCX_SB_SIZE:0] spc3_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc3_sa;
> reg [SPC_CCX_SB_SIZE:0] spc4_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc4_sa;
> reg [SPC_CCX_SB_SIZE:0] spc5_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc5_sa;
> reg [SPC_CCX_SB_SIZE:0] spc6_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc6_sa;
> reg [SPC_CCX_SB_SIZE:0] spc7_ccx_sa;
> reg [CCX_SPC_SB_SIZE:0] ccx_spc7_sa;
> 
> always @(posedge clk) begin
>     if (m_rst) begin
>        spc0_ccx_sa <= 'b1;
>        ccx_spc0_sa <= 'b1;
>     end else begin
>        spc0_ccx_sa[0] <= spc0_ccx_sa[1147] ^ spc0_ccx_sa[1134] ^ spc0_ccx_sa[1133] ^ spc0_ccx_sa[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc0_ccx_sa[i] <= spc0_ccx_sa[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc0_ccx_sa[j*8] <= spc0_ccx_sa[j*8] ^ eqed_spc0_ccx[j];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc0_sa[j*8] <= ccx_spc0_sa[j*8] ^ eqed_ccx_spc0[j];
>        end
>        ccx_spc0_sa[0] <= ccx_spc0_sa[1239] ^ ccx_spc0_sa[1235] ^ ccx_spc0_sa[1233] ^ ccx_spc0_sa[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc0_sa[i] <= ccx_spc0_sa[i-1];
>        end
>     end
> end
> 
> 
> always @(posedge clk) begin
>     if (m_rst2) begin
>        spc0_ccx_sa2 <= 'b1;
>        ccx_spc0_sa2 <= 'b1;
>     end else begin
>        spc0_ccx_sa2[0] <= spc0_ccx_sa2[1147] ^ spc0_ccx_sa2[1134] ^ spc0_ccx_sa2[1133] ^ spc0_ccx_sa2[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc0_ccx_sa2[i] <= spc0_ccx_sa2[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc0_ccx_sa2[j*8] <= spc0_ccx_sa2[j*8] ^ eqed_spc0_ccx[j];
>        end
>        ccx_spc0_sa2[0] <= ccx_spc0_sa2[1239] ^ ccx_spc0_sa2[1235] ^ ccx_spc0_sa2[1233] ^ ccx_spc0_sa2[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc0_sa2[i] <= ccx_spc0_sa2[i-1];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc0_sa2[j*8] <= ccx_spc0_sa2[j*8] ^ eqed_ccx_spc0[j];
>        end
>     end
> end
> 
> always @(posedge clk) begin
>     if (m_rst) begin
>        spc1_ccx_sa <= 'b1;
>        ccx_spc1_sa <= 'b1;
>     end else begin
>        spc1_ccx_sa[0] <= spc1_ccx_sa[1147] ^ spc1_ccx_sa[1134] ^ spc1_ccx_sa[1133] ^ spc1_ccx_sa[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc1_ccx_sa[i] <= spc1_ccx_sa[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc1_ccx_sa[j*8] <= spc1_ccx_sa[j*8] ^ eqed_spc1_ccx[j];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc1_sa[j*8] <= ccx_spc1_sa[j*8] ^ eqed_ccx_spc1[j];
>        end
>        ccx_spc1_sa[0] <= ccx_spc1_sa[1239] ^ ccx_spc1_sa[1235] ^ ccx_spc1_sa[1233] ^ ccx_spc1_sa[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc1_sa[i] <= ccx_spc1_sa[i-1];
>        end
>     end
> end
> 
> 
> always @(posedge clk) begin
>     if (m_rst2) begin
>        spc1_ccx_sa2 <= 'b1;
>        ccx_spc1_sa2 <= 'b1;
>     end else begin
>        spc1_ccx_sa2[0] <= spc1_ccx_sa2[1147] ^ spc1_ccx_sa2[1134] ^ spc1_ccx_sa2[1133] ^ spc1_ccx_sa2[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc1_ccx_sa2[i] <= spc1_ccx_sa2[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc1_ccx_sa2[j*8] <= spc1_ccx_sa2[j*8] ^ eqed_spc1_ccx[j];
>        end
>        ccx_spc1_sa2[0] <= ccx_spc1_sa2[1239] ^ ccx_spc1_sa2[1235] ^ ccx_spc1_sa2[1233] ^ ccx_spc1_sa2[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc1_sa2[i] <= ccx_spc1_sa2[i-1];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc1_sa2[j*8] <= ccx_spc1_sa2[j*8] ^ eqed_ccx_spc1[j];
>        end
>     end
> end
> 
> always @(posedge clk) begin
>     if (m_rst) begin
>        spc2_ccx_sa <= 'b1;
>        ccx_spc2_sa <= 'b1;
>     end else begin
>        spc2_ccx_sa[0] <= spc2_ccx_sa[1147] ^ spc2_ccx_sa[1134] ^ spc2_ccx_sa[1133] ^ spc2_ccx_sa[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc2_ccx_sa[i] <= spc2_ccx_sa[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc2_ccx_sa[j*8] <= spc2_ccx_sa[j*8] ^ eqed_spc2_ccx[j];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc2_sa[j*8] <= ccx_spc2_sa[j*8] ^ eqed_ccx_spc2[j];
>        end
>        ccx_spc2_sa[0] <= ccx_spc2_sa[1239] ^ ccx_spc2_sa[1235] ^ ccx_spc2_sa[1233] ^ ccx_spc2_sa[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc2_sa[i] <= ccx_spc2_sa[i-1];
>        end
>     end
> end
> 
> 
> always @(posedge clk) begin
>     if (m_rst2) begin
>        spc2_ccx_sa2 <= 'b1;
>        ccx_spc2_sa2 <= 'b1;
>     end else begin
>        spc2_ccx_sa2[0] <= spc2_ccx_sa2[1147] ^ spc2_ccx_sa2[1134] ^ spc2_ccx_sa2[1133] ^ spc2_ccx_sa2[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc2_ccx_sa2[i] <= spc2_ccx_sa2[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc2_ccx_sa2[j*8] <= spc2_ccx_sa2[j*8] ^ eqed_spc2_ccx[j];
>        end
>        ccx_spc2_sa2[0] <= ccx_spc2_sa2[1239] ^ ccx_spc2_sa2[1235] ^ ccx_spc2_sa2[1233] ^ ccx_spc2_sa2[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc2_sa2[i] <= ccx_spc2_sa2[i-1];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc2_sa2[j*8] <= ccx_spc2_sa2[j*8] ^ eqed_ccx_spc2[j];
>        end
>     end
> end
> 
> always @(posedge clk) begin
>     if (m_rst) begin
>        spc3_ccx_sa <= 'b1;
>        ccx_spc3_sa <= 'b1;
>     end else begin
>        spc3_ccx_sa[0] <= spc3_ccx_sa[1147] ^ spc3_ccx_sa[1134] ^ spc3_ccx_sa[1133] ^ spc3_ccx_sa[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc3_ccx_sa[i] <= spc3_ccx_sa[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc3_ccx_sa[j*8] <= spc3_ccx_sa[j*8] ^ eqed_spc3_ccx[j];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc3_sa[j*8] <= ccx_spc3_sa[j*8] ^ eqed_ccx_spc3[j];
>        end
>        ccx_spc3_sa[0] <= ccx_spc3_sa[1239] ^ ccx_spc3_sa[1235] ^ ccx_spc3_sa[1233] ^ ccx_spc3_sa[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc3_sa[i] <= ccx_spc3_sa[i-1];
>        end
>     end
> end
> 
> 
> always @(posedge clk) begin
>     if (m_rst2) begin
>        spc3_ccx_sa2 <= 'b1;
>        ccx_spc3_sa2 <= 'b1;
>     end else begin
>        spc3_ccx_sa2[0] <= spc3_ccx_sa2[1147] ^ spc3_ccx_sa2[1134] ^ spc3_ccx_sa2[1133] ^ spc3_ccx_sa2[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc3_ccx_sa2[i] <= spc3_ccx_sa2[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc3_ccx_sa2[j*8] <= spc3_ccx_sa2[j*8] ^ eqed_spc3_ccx[j];
>        end
>        ccx_spc3_sa2[0] <= ccx_spc3_sa2[1239] ^ ccx_spc3_sa2[1235] ^ ccx_spc3_sa2[1233] ^ ccx_spc3_sa2[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc3_sa2[i] <= ccx_spc3_sa2[i-1];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc3_sa2[j*8] <= ccx_spc3_sa2[j*8] ^ eqed_ccx_spc3[j];
>        end
>     end
> end
> 
> always @(posedge clk) begin
>     if (m_rst) begin
>        spc4_ccx_sa <= 'b1;
>        ccx_spc4_sa <= 'b1;
>     end else begin
>        spc4_ccx_sa[0] <= spc4_ccx_sa[1147] ^ spc4_ccx_sa[1134] ^ spc4_ccx_sa[1133] ^ spc4_ccx_sa[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc4_ccx_sa[i] <= spc4_ccx_sa[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc4_ccx_sa[j*8] <= spc4_ccx_sa[j*8] ^ eqed_spc4_ccx[j];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc4_sa[j*8] <= ccx_spc4_sa[j*8] ^ eqed_ccx_spc4[j];
>        end
>        ccx_spc4_sa[0] <= ccx_spc4_sa[1239] ^ ccx_spc4_sa[1235] ^ ccx_spc4_sa[1233] ^ ccx_spc4_sa[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc4_sa[i] <= ccx_spc4_sa[i-1];
>        end
>     end
> end
> 
> 
> always @(posedge clk) begin
>     if (m_rst2) begin
>        spc4_ccx_sa2 <= 'b1;
>        ccx_spc4_sa2 <= 'b1;
>     end else begin
>        spc4_ccx_sa2[0] <= spc4_ccx_sa2[1147] ^ spc4_ccx_sa2[1134] ^ spc4_ccx_sa2[1133] ^ spc4_ccx_sa2[1128];
>        for (int i = 1; i < SPC_CCX_SB_SIZE; i++) begin
>            spc4_ccx_sa2[i] <= spc4_ccx_sa2[i-1];
>        end
>        for (int j = 0; j < SPC_CCX_B; j++) begin
>            spc4_ccx_sa2[j*8] <= spc4_ccx_sa2[j*8] ^ eqed_spc4_ccx[j];
>        end
>        ccx_spc4_sa2[0] <= ccx_spc4_sa2[1239] ^ ccx_spc4_sa2[1235] ^ ccx_spc4_sa2[1233] ^ ccx_spc4_sa2[1230];
>        for (int i = 1; i < CCX_SPC_B; i++) begin
>            ccx_spc4_sa2[i] <= ccx_spc4_sa2[i-1];
>        end
>        for (int j = 0; j < OUT_SIZE; j++) begin
>            ccx_spc4_sa2[j*8] <= ccx_spc4_sa2[j*8] ^ eqed_ccx_spc4[j];
>        end
>     end
> end
> 
> 
> // CCX-L2C interface
> wire [139:0] eqed_ccx_l2c0;
> wire [155:0] eqed_l2c0_ccx;
> wire [139:0] eqed_ccx_l2c1;
> wire [155:0] eqed_l2c1_ccx;
> wire [139:0] eqed_ccx_l2c2;
> wire [155:0] eqed_l2c2_ccx;
> wire [139:0] eqed_ccx_l2c3;
> wire [155:0] eqed_l2c3_ccx;
> wire [139:0] eqed_ccx_l2c4;
> wire [155:0] eqed_l2c4_ccx;
> wire [139:0] eqed_ccx_l2c5;
> wire [155:0] eqed_l2c5_ccx;
> wire [139:0] eqed_ccx_l2c6;
> wire [155:0] eqed_l2c6_ccx;
> wire [139:0] eqed_ccx_l2c7;
> wire [155:0] eqed_l2c7_ccx;
> 
> assign eqed_ccx_l2c0 = {pcx_sctag0_atm_px1, pcx_sctag0_data_px2, pcx_sctag0_data_rdy_px1, cpx_sctag0_grant_cx};
> assign eqed_l2c0_ccx = {sctag0_cpx_atom_cq, sctag0_cpx_data_ca, sctag0_cpx_req_cq};
> assign eqed_ccx_l2c1 = {pcx_sctag1_atm_px1, pcx_sctag1_data_px2, pcx_sctag1_data_rdy_px1, cpx_sctag1_grant_cx};
> assign eqed_l2c1_ccx = {sctag1_cpx_atom_cq, sctag1_cpx_data_ca, sctag1_cpx_req_cq};
> assign eqed_ccx_l2c2 = {pcx_sctag2_atm_px1, pcx_sctag2_data_px2, pcx_sctag2_data_rdy_px1, cpx_sctag2_grant_cx};
> assign eqed_l2c2_ccx = {sctag2_cpx_atom_cq, sctag2_cpx_data_ca, sctag2_cpx_req_cq};
> assign eqed_ccx_l2c3 = {pcx_sctag3_atm_px1, pcx_sctag3_data_px2, pcx_sctag3_data_rdy_px1, cpx_sctag3_grant_cx};
> assign eqed_l2c3_ccx = {sctag3_cpx_atom_cq, sctag3_cpx_data_ca, sctag3_cpx_req_cq};
> assign eqed_ccx_l2c4 = {pcx_sctag4_atm_px1, pcx_sctag4_data_px2, pcx_sctag4_data_rdy_px1, cpx_sctag4_grant_cx};
> assign eqed_l2c4_ccx = {sctag4_cpx_atom_cq, sctag4_cpx_data_ca, sctag4_cpx_req_cq};
> assign eqed_ccx_l2c5 = {pcx_sctag5_atm_px1, pcx_sctag5_data_px2, pcx_sctag5_data_rdy_px1, cpx_sctag5_grant_cx};
> assign eqed_l2c5_ccx = {sctag5_cpx_atom_cq, sctag5_cpx_data_ca, sctag5_cpx_req_cq};
> assign eqed_ccx_l2c6 = {pcx_sctag6_atm_px1, pcx_sctag6_data_px2, pcx_sctag6_data_rdy_px1, cpx_sctag6_grant_cx};
> assign eqed_l2c6_ccx = {sctag6_cpx_atom_cq, sctag6_cpx_data_ca, sctag6_cpx_req_cq};
> assign eqed_ccx_l2c7 = {pcx_sctag7_atm_px1, pcx_sctag7_data_px2, pcx_sctag7_data_rdy_px1, cpx_sctag7_grant_cx};
> assign eqed_l2c7_ccx = {sctag7_cpx_atom_cq, sctag7_cpx_data_ca, sctag7_cpx_req_cq};
> 
> // L2C-MCU interface
> wire [67:0] eqed_l2c0_mcu0;
> wire [70:0] eqed_mcu0_l2c0;
> wire [67:0] eqed_l2c1_mcu0;
> wire [70:0] eqed_mcu0_l2c1;
> wire [67:0] eqed_l2c2_mcu1;
> wire [70:0] eqed_mcu1_l2c2;
> wire [67:0] eqed_l2c3_mcu1;
> wire [70:0] eqed_mcu1_l2c3;
> wire [67:0] eqed_l2c4_mcu2;
> wire [70:0] eqed_mcu2_l2c4;
> wire [67:0] eqed_l2c5_mcu2;
> wire [70:0] eqed_mcu2_l2c5;
> wire [67:0] eqed_l2c6_mcu3;
> wire [70:0] eqed_mcu3_l2c6;
> wire [67:0] eqed_l2c7_mcu3;
> wire [70:0] eqed_mcu3_l2c7;
> 
> 
> assign eqed_l2c0_mcu0 = {l2b0_mcu0_wr_data_r5, l2b0_mcu0_data_vld_r5, l2b0_mcu0_data_mecc_r5, l2t0_mcu0_rd_req, l2t0_mcu0_wr_req};
> assign eqed_mcu0_l2c0 = {mcu0_l2b01_data_r2, mcu0_l2b01_ecc_r2, mcu0_l2t0_rd_ack, mcu0_l2t0_wr_ack, mcu0_l2t0_data_vld_r0, mcu0_l2t0_rd_req_id_r0};
> assign eqed_l2c1_mcu0 = {l2b1_mcu0_wr_data_r5, l2b1_mcu0_data_vld_r5, l2b1_mcu0_data_mecc_r5, l2t1_mcu0_rd_req, l2t1_mcu0_wr_req};
> assign eqed_mcu0_l2c1 = {mcu0_l2b01_data_r2, mcu0_l2b01_ecc_r2, mcu0_l2t1_rd_ack, mcu0_l2t1_wr_ack, mcu0_l2t1_data_vld_r0, mcu0_l2t1_rd_req_id_r0};
> assign eqed_l2c2_mcu1 = {l2b2_mcu1_wr_data_r5, l2b2_mcu1_data_vld_r5, l2b2_mcu1_data_mecc_r5, l2t2_mcu1_rd_req, l2t2_mcu1_wr_req};
> assign eqed_mcu1_l2c2 = {mcu1_l2b23_data_r2, mcu1_l2b23_ecc_r2, mcu1_l2t2_rd_ack, mcu1_l2t2_wr_ack, mcu1_l2t2_data_vld_r0, mcu0_l2t2_rd_req_id_r0};
> assign eqed_l2c3_mcu1 = {l2b3_mcu1_wr_data_r5, l2b3_mcu1_data_vld_r5, l2b3_mcu1_data_mecc_r5, l2t3_mcu1_rd_req, l2t3_mcu1_wr_req};
> assign eqed_mcu1_l2c3 = {mcu1_l2b23_data_r2, mcu1_l2b23_ecc_r2, mcu1_l2t3_rd_ack, mcu1_l2t3_wr_ack, mcu1_l2t3_data_vld_r0, mcu0_l2t3_rd_req_id_r0};
> assign eqed_l2c4_mcu2 = {l2b4_mcu2_wr_data_r5, l2b4_mcu2_data_vld_r5, l2b4_mcu2_data_mecc_r5, l2t4_mcu2_rd_req, l2t4_mcu2_wr_req};
> assign eqed_mcu2_l2c4 = {mcu2_l2b45_data_r2, mcu2_l2b45_ecc_r2, mcu2_l2t4_rd_ack, mcu2_l2t4_wr_ack, mcu2_l2t4_data_vld_r0, mcu0_l2t4_rd_req_id_r0};
> assign eqed_l2c5_mcu2 = {l2b5_mcu2_wr_data_r5, l2b5_mcu2_data_vld_r5, l2b5_mcu2_data_mecc_r5, l2t5_mcu2_rd_req, l2t5_mcu2_wr_req};
> assign eqed_mcu2_l2c5 = {mcu2_l2b45_data_r2, mcu2_l2b45_ecc_r2, mcu2_l2t5_rd_ack, mcu2_l2t5_wr_ack, mcu2_l2t5_data_vld_r0, mcu0_l2t5_rd_req_id_r0};
> assign eqed_l2c6_mcu3 = {l2b6_mcu3_wr_data_r5, l2b6_mcu3_data_vld_r5, l2b6_mcu3_data_mecc_r5, l2t6_mcu3_rd_req, l2t6_mcu3_wr_req};
> assign eqed_mcu3_l2c6 = {mcu3_l2b67_data_r2, mcu3_l2b67_ecc_r2, mcu3_l2t6_rd_ack, mcu3_l2t6_wr_ack, mcu3_l2t6_data_vld_r0, mcu0_l2t6_rd_req_id_r0};
> assign eqed_l2c7_mcu3 = {l2b7_mcu3_wr_data_r5, l2b7_mcu3_data_vld_r5, l2b7_mcu3_data_mecc_r5, l2t7_mcu3_rd_req, l2t7_mcu3_wr_req};
> assign eqed_mcu3_l2c7 = {mcu3_l2b67_data_r2, mcu3_l2b67_ecc_r2, mcu3_l2t7_rd_ack, mcu3_l2t7_wr_ack, mcu3_l2t7_data_vld_r0, mcu0_l2t7_rd_req_id_r0};
