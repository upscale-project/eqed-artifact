--- eqed_ost2.sv	2021-06-02 15:33:10.051964946 -0700
+++ eqed_ost2_l2c0_ex2.sv	2021-06-02 15:31:34.003806547 -0700
@@ -4220,7 +4220,7 @@
     && (ncu_mcu_ba45 == 1) 
     && (ncu_mcu_ba67 == 1) 
     // TCU-L2
-/*    && (l2b0.scan_in == '0) 
+    && (l2b0.scan_in == '0) 
     && (l2b0.tcu_se_scancollar_in == 1'b0) 
     && (l2b0.tcu_se_scancollar_out == 1'b0) 
     && (l2b1.scan_in == '0) 
@@ -4276,12 +4276,12 @@
     && (l2t6.tcu_se_scancollar_out == 1'b0) 
     && (l2t7.tcu_se_scancollar_in == 1'b0) 
     && (l2t7.tcu_se_scancollar_out == 1'b0) 
-    && (ccx.cpx.cpx_dpa_scanin == 1'b0) */
-    && (ccx.scan_in == '0) 
+    && (ccx.cpx.cpx_dpa_scanin == 1'b0) 
+/*    && (ccx.scan_in == '0) 
     && (ccx.tcu_aclk == '0) 
     && (ccx.tcu_bclk == '0) 
     && (ccx.tcu_pce_ov == '0) 
-    && (ccx.tcu_scan_en == '0)  
+    && (ccx.tcu_scan_en == '0)  */
     && (rst_ncu_vld == 1'b0) 
     && (sii_l2b0_ecc == 7'b0) 
     && (sii_l2b1_ecc == 7'b0) 
@@ -4623,6 +4623,8 @@
 parameter SPC_CCX_SB_SIZE = 1184;
 parameter CCX_SPC_SB_SIZE = 1240;
 
+/*
+
 // Declare the registers for the Signature Analyzer MISRs
 reg [SPC_CCX_SB_SIZE:0] spc0_ccx_sa;
 reg [CCX_SPC_SB_SIZE:0] ccx_spc0_sa;
@@ -5243,7 +5245,7 @@
     end
 end
 
-
+*/
 
 // CCX-L2C interface
 wire [139:0] eqed_ccx_l2c0;
@@ -5289,6 +5291,7 @@
 // Declare the registers for the Signature Analyzer MISRs
 reg [L2C_CCX_SB_SIZE:0] l2c0_ccx_sa;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c0_sa;
+/*
 reg [L2C_CCX_SB_SIZE:0] l2c1_ccx_sa;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c1_sa;
 reg [L2C_CCX_SB_SIZE:0] l2c2_ccx_sa;
@@ -5303,10 +5306,11 @@
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c6_sa;
 reg [L2C_CCX_SB_SIZE:0] l2c7_ccx_sa;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c7_sa;
-
+*/
 // Declare the registers for the Signature Analyzer MISRs
 reg [L2C_CCX_SB_SIZE:0] l2c0_ccx_sa2;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c0_sa2;
+/*
 reg [L2C_CCX_SB_SIZE:0] l2c1_ccx_sa2;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c1_sa2;
 reg [L2C_CCX_SB_SIZE:0] l2c2_ccx_sa2;
@@ -5321,7 +5325,7 @@
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c6_sa2;
 reg [L2C_CCX_SB_SIZE:0] l2c7_ccx_sa2;
 reg [CCX_L2C_SB_SIZE:0] ccx_l2c7_sa2;
-
+*/
 
 always @(posedge clk) begin
     if (m_rst) begin
@@ -5395,7 +5399,7 @@
        end
     end
 end
-
+/*
 always @(posedge clk) begin
     if (m_rst) begin
        l2c1_ccx_sa <= 1;
@@ -5906,14 +5910,100 @@
        end
     end
 end
+*/
 
-M_stable_eqed_reset : assume property (
-                             @(posedge clk)
-                             ##1 eqed_rst == 1'b0
-                             );
+// L2C-L2D interface
+
+wire [125:0] eqed_l2c0_l2d0;
+wire [155:0] eqed_l2d0_l2c0;
+
+assign eqed_l2c0_l2d0 = {l2t0_l2d0_way_sel_c2, l2t0_l2d0_rd_wr_c2, l2t0_l2d0_set_c2, l2t0_l2d0_col_offset_c2, 
+                         l2t0_l2d0_word_en_c2, l2t0_l2d0_fbrd_c3, l2t0_l2d0_fb_hit_c3, l2t0_l2d0_stdecc_c2};
+assign eqed_l2d0_l2c0 = {l2d0_l2t0_decc_c6};
+
+parameter L2C_L2D_SB_SIZE = 1008;
+parameter L2D_L2C_SB_SIZE = 1248;
+
+// Declare the registers for the Signature Analyzer MISRs
+reg [L2C_L2D_SB_SIZE:0] l2c0_l2d0_sa;
+reg [L2D_L2C_SB_SIZE:0] l2d0_l2c0_sa;
 
+reg [L2C_L2D_SB_SIZE:0] l2c0_l2d0_sa2;
+reg [L2D_L2C_SB_SIZE:0] l2d0_l2c0_sa2;
 
 
+always @(posedge clk) begin
+    if (m_rst) begin
+       l2c0_l2d0_sa <= 1;
+       l2d0_l2c0_sa <= 1;
+    end else begin
+       for (int i = 0, int j = 0; i < L2C_L2D_SB_SIZE; i = i+8, j++) begin
+	       if (i == 0) begin
+		       l2c0_l2d0_sa[0] <= l2c0_l2d0_sa[1008] ^ l2c0_l2d0_sa[1006] ^ l2c0_l2d0_sa[1005] ^ l2c0_l2d0_sa[1001] ^ eqed_l2c0_l2d0[0];
+		   end else begin
+			   l2c0_l2d0_sa[i] <= l2c0_l2d0_sa[i-1] ^ eqed_l2c0_l2d0[j]; 
+		   end
+		       l2c0_l2d0_sa[i+1] <= l2c0_l2d0_sa[i];
+		       l2c0_l2d0_sa[i+2] <= l2c0_l2d0_sa[i+1];
+	           l2c0_l2d0_sa[i+3] <= l2c0_l2d0_sa[i+2];
+		       l2c0_l2d0_sa[i+4] <= l2c0_l2d0_sa[i+3];
+		       l2c0_l2d0_sa[i+5] <= l2c0_l2d0_sa[i+4];
+		       l2c0_l2d0_sa[i+6] <= l2c0_l2d0_sa[i+5];
+			   l2c0_l2d0_sa[i+7] <= l2c0_l2d0_sa[i+6];
+       end
+       for (int i = 0, int j = 0; i < L2D_L2C_SB_SIZE; i = i+8, j++) begin
+	       if (i == 0) begin
+		       l2d0_l2c0_sa[0] <= l2d0_l2c0_sa[1247] ^ l2d0_l2c0_sa[1244] ^ l2d0_l2c0_sa[1243] ^ l2d0_l2c0_sa[1240] ^ eqed_l2d0_l2c0[0];
+		   end else begin
+			   l2d0_l2c0_sa[i] <= l2d0_l2c0_sa[i-1] ^ eqed_l2d0_l2c0[j]; 
+		   end
+		       l2d0_l2c0_sa[i+1] <= l2d0_l2c0_sa[i];
+		       l2d0_l2c0_sa[i+2] <= l2d0_l2c0_sa[i+1];
+	           l2d0_l2c0_sa[i+3] <= l2d0_l2c0_sa[i+2];
+		       l2d0_l2c0_sa[i+4] <= l2d0_l2c0_sa[i+3];
+		       l2d0_l2c0_sa[i+5] <= l2d0_l2c0_sa[i+4];
+		       l2d0_l2c0_sa[i+6] <= l2d0_l2c0_sa[i+5];
+			   l2d0_l2c0_sa[i+7] <= l2d0_l2c0_sa[i+6];
+       end
+    end
+end
+
+
+always @(posedge clk) begin
+    if (m_rst2) begin
+       l2c0_l2d0_sa2 <= 1;
+       l2d0_l2c0_sa2 <= 1;
+    end else begin
+       for (int i = 0, int j = 0; i < L2C_L2D_SB_SIZE; i = i+8, j++) begin
+	       if (i == 0) begin
+		       l2c0_l2d0_sa2[0] <= l2c0_l2d0_sa2[1008] ^ l2c0_l2d0_sa2[1006] ^ l2c0_l2d0_sa2[1005] ^ l2c0_l2d0_sa2[1001] ^ eqed_l2c0_l2d0[0];
+		   end else begin
+			   l2c0_l2d0_sa2[i] <= l2c0_l2d0_sa2[i] ^ eqed_l2c0_l2d0[j]; 
+		   end
+		       l2c0_l2d0_sa2[i+1] <= l2c0_l2d0_sa2[i];
+		       l2c0_l2d0_sa2[i+2] <= l2c0_l2d0_sa2[i+1];
+	           l2c0_l2d0_sa2[i+3] <= l2c0_l2d0_sa2[i+2];
+		       l2c0_l2d0_sa2[i+4] <= l2c0_l2d0_sa2[i+3];
+		       l2c0_l2d0_sa2[i+5] <= l2c0_l2d0_sa2[i+4];
+		       l2c0_l2d0_sa2[i+6] <= l2c0_l2d0_sa2[i+5];
+			   l2c0_l2d0_sa2[i+7] <= l2c0_l2d0_sa2[i+6];
+       end
+       for (int i = 0, int j = 0; i < L2D_L2C_SB_SIZE; i = i+8, j++) begin
+	       if (i == 0) begin
+		       l2d0_l2c0_sa2[0] <= l2d0_l2c0_sa2[1247] ^ l2d0_l2c0_sa2[1244] ^ l2d0_l2c0_sa2[1243] ^ l2d0_l2c0_sa2[1240] ^ eqed_l2d0_l2c0[0];
+		   end else begin
+			   l2d0_l2c0_sa2[i] <= l2d0_l2c0_sa2[i] ^ eqed_l2d0_l2c0[j]; 
+		   end
+		       l2d0_l2c0_sa2[i+1] <= l2d0_l2c0_sa2[i];
+		       l2d0_l2c0_sa2[i+2] <= l2d0_l2c0_sa2[i+1];
+	           l2d0_l2c0_sa2[i+3] <= l2d0_l2c0_sa2[i+2];
+		       l2d0_l2c0_sa2[i+4] <= l2d0_l2c0_sa2[i+3];
+		       l2d0_l2c0_sa2[i+5] <= l2d0_l2c0_sa2[i+4];
+		       l2d0_l2c0_sa2[i+6] <= l2d0_l2c0_sa2[i+5];
+			   l2d0_l2c0_sa2[i+7] <= l2d0_l2c0_sa2[i+6];
+       end
+    end
+end
 
 
 // L2C-MCU interface
@@ -5962,6 +6052,7 @@
 // Declare the registers for the Signature Analyzer MISRs
 reg [L2C_MCU_SB_SIZE:0] l2c0_mcu0_sa;
 reg [MCU_L2C_SB_SIZE:0] mcu0_l2c0_sa;
+/*
 reg [L2C_MCU_SB_SIZE:0] l2c1_mcu0_sa;
 reg [MCU_L2C_SB_SIZE:0] mcu0_l2c1_sa;
 reg [L2C_MCU_SB_SIZE:0] l2c2_mcu1_sa;
@@ -5976,10 +6067,11 @@
 reg [MCU_L2C_SB_SIZE:0] mcu3_l2c6_sa;
 reg [L2C_MCU_SB_SIZE:0] l2c7_mcu3_sa;
 reg [MCU_L2C_SB_SIZE:0] mcu3_l2c7_sa;
-
+*/
 // Declare the registers for the Signature Analyzer MISRs
 reg [L2C_MCU_SB_SIZE:0] l2c0_mcu0_sa2;
 reg [MCU_L2C_SB_SIZE:0] mcu0_l2c0_sa2;
+/*
 reg [L2C_MCU_SB_SIZE:0] l2c1_mcu0_sa2;
 reg [MCU_L2C_SB_SIZE:0] mcu0_l2c1_sa2;
 reg [L2C_MCU_SB_SIZE:0] l2c2_mcu1_sa2;
@@ -5994,8 +6086,7 @@
 reg [MCU_L2C_SB_SIZE:0] mcu3_l2c6_sa2;
 reg [L2C_MCU_SB_SIZE:0] l2c7_mcu3_sa2;
 reg [MCU_L2C_SB_SIZE:0] mcu3_l2c7_sa2;
-
-
+*/
 always @(posedge clk) begin
     if (m_rst) begin
        l2c0_mcu0_sa <= 1;
@@ -6032,6 +6123,7 @@
     end
 end
 
+/*
 
 always @(posedge clk) begin
     if (m_rst) begin
@@ -6580,8 +6672,29 @@
     end
 end
 
+*/
+
+M_stable_eqed_reset : assume property (
+                             @(posedge clk)
+                             ##1 eqed_rst == 1'b0
+                             );
+
+
+C_check_l2c0 : cover property (
+                             @(posedge clk)
+                             eqed_rst == 1'b1
+                             ##37
+					         l2d0_l2c0_sa    == 1249'h022000fdfda30509110a01028001ff047ada2f614b8c46cde90000010dc1804c731606098172d54b43f0fc69028072e86a33f4f746bd0f05020a255ecabbfefd86fef34668ca3d9efbff77fe4ae207ddf70000117855aa16ebdbfdad3f9df377ffbfb9ffd7fd00fffd6703c1922cffffc8000200095401123cba8999e467deb7def73d1f281512e2801bde9ad57384387923beef8e7f2f5a040003ce7
+							 && ccx_l2c0_sa  == 1121'h0aa0060000a606060606a00600a6808086a6260000000600202080a0a62680a02600860006262026260600008026a6a626a0a0a000a086a026008680008080062000a6a0a6060606a6860680a0a6a080a000a08680060006062626a02680260686060620868020060020000020a08626a686a08080a0a626a6a6a62686a080a0a0a02085fc9490041c0200015
+							 && mcu0_l2c0_sa == 569'h0779ecdf6fbfffc0001200000000100000003f87fffdfe0b19f0601d0ff940000100003fefe006703900018009fffffffdffbfe7ebf4ffe595010fc44e8000003c2693a01d108fa
+							 && l2c0_l2d0_sa == 1009'h099fced7f7bd7f6effffffffffffffffffffbebefffffff5fdf474f9aff684a464a484b4d4e5cdfb05adb6f6fbefe7f7ffe2de3ba7c9626f7da3fff3f7e72bfffffff7fe8ccffc5fffdffefffffaf9ffffffffffffdffffffbffffea7fffffefdffffffffeffffdfffff7ffffff7ff0a6befffffff5fbffffffffffffffff
+							 && l2c0_ccx_sa  == 1249'h03c3e869de40780c1000fffea775717effb960ff77fffb7fbc4800003004f281c1ce08af2ff0f9e21d2400400fbf6bffb6f818200001eee6c24660a3cc707bcce9027ff127e969987da87e02002017ad4e12de6f3c0bf8f3e008045122e19fe7ebee36d94054bedf185857c43e23f00fcffc2147c4f67dcecdabffb7ff14c2ae9fbdea43c9c90291cf77e04bfa3cf7dfb27f785f69ef817feefd503df
+							 && l2c0_mcu0_sa == 545'h0c33ffffefffffffffff8d7ffffffffffbf87ed7fbf7fd73fffffffffffd7dfdf6ffffaffbbfcffdfffffffbfffdffc0000bf0e56510b387fdff9fcffffffff1a71398062
+                             );
+
 
 
+/*
 
 spc spc0(
   .vnw_ary0                 (SPC_VNW[ 0 ]),
@@ -7320,12 +7433,14 @@
 
 //________________________________________________________________
 
-
+*/
 
 //// stagging flops
 
 //assign
 
+/*
+
 ccx ccx(
 
   //  .gclk		    ( cmp_gclk_c2_ccx_right ), // cmp_gclk_c1_r[3]) , 
@@ -7351,7 +7466,7 @@
 
   .ccx_lstg_in              (
                              {'0
-							 /*dbg0_dbg1_l2b0_sio_ack_dest,
+							  dbg0_dbg1_l2b0_sio_ack_dest,
                               dbg0_dbg1_l2b0_sio_ack_type,
                               dbg0_dbg1_l2b0_sio_ctag_vld,
                               dbg0_dbg1_l2b1_sio_ack_dest,
@@ -7404,7 +7519,7 @@
                               tcu_l2b2_mbist_start,
                               l2b3_tcu_mbist_done,
                               l2b3_tcu_mbist_fail,
-                              tcu_l2b3_mbist_start*/
+                              tcu_l2b3_mbist_start
                              }
                             ),
   .ccx_lstg_out             (
@@ -7466,7 +7581,7 @@
                             ),
   .ccx_rstg_in              (
                              {'0
-							  /*5'b0,
+							  5'b0,
                               sii_l2b5_ecc[ 6 : 5 ],
                               4'b0,
                               sii_l2b5_ecc[ 4 : 3 ],
@@ -7514,7 +7629,7 @@
                               4'b0,
                               sii_l2b7_ecc[  4  :  3  ],
                               4'b0,
-                              sii_l2b7_ecc[  6  :  5  ]*/
+                              sii_l2b7_ecc[  6  :  5  ]
                              }
                             ),
   .ccx_rstg_out             (
@@ -7683,7 +7798,9 @@
         );
 //________________________________________________________________
 
+*/
 
+/*
 
 n2_l2d_sp_512kb_cust l2d0(
 
@@ -8031,7 +8148,7 @@
         );
 //________________________________________________________________
 
-
+*/
 
 /////// stagging flop
 
@@ -8166,8 +8283,8 @@
   .sii_l2b_ecc              (sii_l2b0_ecc[ 6 : 0 ]           ),
   .l2t_sii_iq_dequeue       (l2t0_sii_iq_dequeue         ),
   .l2t_sii_wib_dequeue      (l2t0_sii_wib_dequeue        ),
-  .rst_por_                 ( gl_l2_por_c3t ), 
-  .rst_wmr_                 ( gl_l2_wmr_c3t ), 
+  .rst_por_                 ( L2_rst ), 
+  .rst_wmr_                 ( ~L2_rst ), 
   .scan_in                  (tcu_soc0_scan_out           ),
   .scan_out                 (l2t0_scan_out               ),
   .efu_l2t_fuse_clr          (efu_l2t0_fuse_clr          ),                       
@@ -8260,6 +8377,8 @@
         );
 //________________________________________________________________
 
+/*
+
 /////// stagging flop
 
 //assign
@@ -8509,6 +8628,8 @@
 
 /////// stagging flop
 
+
+
 //assign
 
 l2t l2t2(
@@ -9872,6 +9993,8 @@
         );
 //________________________________________________________________
 
+*/
+
 l2b l2b0(
   .ccu_slow_cmp_sync_en ( gl_io_cmp_sync_en_c3t0 ), // ( gl_io_cmp_sync_en_c3t ), - for int6.1
   .ccu_cmp_slow_sync_en ( gl_cmp_io_sync_en_c3t0 ), // ( gl_cmp_io_sync_en_c3t ), - for int6.1
@@ -9879,8 +10002,8 @@
 
   .gclk                     ( cmp_gclk_c3_l2b0 ), // cmp_gclk_c0_r[1]), 
   .tcu_clk_stop ( gl_l2b0_clk_stop ),	// staged clk_stop
-  .rst_por_                 (gl_l2_por_c3t0 			), // ( gl_l2_por_c3t ), - for int6.1
-  .rst_wmr_                 (gl_l2_wmr_c3t0 			), // ( gl_l2_wmr_c3t ), - for int6.1
+  .rst_por_                 (L2_rst 			), // ( gl_l2_por_c3t ), - for int6.1
+  .rst_wmr_                 (~L2_rst 			), // ( gl_l2_wmr_c3t ), - for int6.1
   .l2t_l2b_fbrd_en_c3       (l2t0_l2b0_fbrd_en_c3        ),// scbuf
   .l2t_l2b_fbrd_wl_c3       (l2t0_l2b0_fbrd_wl_c3        ),
   .l2t_l2b_fbwr_wen_r2      (l2t0_l2b0_fbwr_wen_r2       ),
@@ -9960,6 +10083,8 @@
         );
 //________________________________________________________________
 
+/*
+
 l2b l2b1(
   .ccu_slow_cmp_sync_en ( gl_io_cmp_sync_en_c3t ),
   .ccu_cmp_slow_sync_en ( gl_cmp_io_sync_en_c3t ),
@@ -11291,6 +11416,7 @@
 
 //________________________________________________________________
 
+*/
 
 
 endmodule // eqed_ost2
